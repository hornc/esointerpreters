#!/usr/bin/env python3

"""
This is a bit of a mess, but it generates a rough port into the esolang Doors
of the old type your-own BASIC game "Spiderwoman" from the Usborne Creepy Computer Games (1983) book.
Spiderwoman was originally written by Val Robinson.

This version has an experimental randomizer (holding the enter key for around 3 seconds).

Not all of the rules are implemented (you get unlimited turns, not the 15 from the original).

The generated program is a FSM that has 26 copies of the basic game, one for each possible 'randomly chosen'
letter.

Some of the input accepting is a bit odd (you might have to press enter twice), but it mostly works, surprisingly.

You can view the listing and info for Spiderwoman and the other Creepy Computer Games
from the publisher: https://usborne.com/nz/books/computer-and-coding-books

You can run the game as generated by this code via:

   ./doors.py -c <(examples/gen_game.py)



Salpynx. 2024.

"""


HALT = [('h', None)]

# fn to generate Doors code to output a string:
def doorprint(s) -> list:
   code = []
   prev = 0
   for c in s:
       cur = ord(c)
       if prev == cur:
           code.append(('t', None))
           continue
       elif abs(prev - cur) < cur:
           if prev > cur:
               e, v = 'c', prev - cur
           else:
               e, v = 'a', cur - prev
       else:
           e, v = 'G', cur           
       t = [(e, v), ('t', None)]
       code += t
       prev = cur
   return code   
       

def output(code: list):
   rooms = ''
   values = ''
   for room in code:
       value = str(room[1]) if room[1] is not None else ' '
       rooms += room[0] + ' ' * (len(value) - 1)
       values += value
   print(rooms)
   print(values)


def jump(a: list, offset=0):
    # jump past the length of a
    return [('v', len(a) + offset + 1)]


def gamefor(c: str, pos: int, WIN, LOSE):
    # generate the game for letter c
    #game = doorprint(f"Spiderwoman has chosen! {c}\n")  # HINT!
    game = doorprint(f"Spiderwoman has chosen!\n")  # HINT!
    offs = len(game)
    game += doorprint("\nTry a word ")
    guessed_ = len(game) + pos + 4
    game += [('e', None), ('a', guessed_ - ord(c)), ('d', guessed_), ('v', guessed_ - 4)]
    # TODO: if found, we need to consume the remaining letters from the buffer...
    found = [('e', None), ('a', guessed_ - 10), ('f', guessed_)] 
    found += doorprint(f"Yes - it is one of those\n")
    found += doorprint(f"\nDo you want to guess? (y or n)") + [('e', None), ('a', pos + offs - ord('n')), ('d', pos + offs)]
    found += doorprint("What is your guess?") +  [('e', None), ('a', LOSE - ord(c)), ('f', LOSE), ('v', WIN)]
    return game + found


def main():

    init = doorprint("SPIDERWOMAN -- Usborne Creepy Computer Games (1983)\n\n")
    init += doorprint("Please hold down the <Enter> key for at least 3 seconds to randomize, and then enter the letter 'c' to continue.\n")


    not_enough = doorprint("That wasn't 3 seconds! This is three seconds...\n\n") + [('S', 3), ('v', 1)]


    win = doorprint("\nOk -- you can go\n(this time)\n\n") + HALT
    lose = doorprint("\nYOU ARE TOO LATE\nYOU ARE A FLY!\n\n") + HALT
    WIN = len(init) + 2
    LOSE = WIN + len(win)

    # we want 10 states if 'c' is entered -> not enough   msg, wait 3 seconds and go back to the start
    rpos = jump(init + win + lose, 1)[0][1]
    random_ = [('e', None), ('a', rpos - ord('c')), ('d', rpos)] * 10

    # followed by 26 states to choose a letter to play the game
    init_random = init + jump(init + not_enough + win + lose, 1) + win + lose + not_enough + random_

    a_pos = jump(init_random)[0][1]

    choices = 'abcdefghijklmnopqrstuvwxyz'

    letters = []

    pos = a_pos
    for choice in choices:
        result = gamefor(choice, pos + 3, WIN, LOSE)
        next_choice = pos + jump(result)[0][1] + 2
        if choice == 'z':
            next_choice = a_pos
        code = [('e', None), ('a', next_choice - ord('c')), ('f', next_choice)] + result
        letters += code
        pos = next_choice 

    # TODO: 15 goes to guess the letter

    game = init_random + letters 

    output(game)


if __name__ == '__main__':
    main()
